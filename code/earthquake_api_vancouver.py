# -*- coding: utf-8 -*-
"""Earthquake_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vf6LU7BfrMdgs9229NYhiF2lJQDY8GH0
"""

import requests
import pandas as pd
from io import StringIO
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
import folium
import folium.plugins
from datetime import datetime
import matplotlib as mpl

today = datetime.today().strftime('%Y-%m-%d')
latitude = 49.24
longitude = -123.11

#earthquake api data
url = "https://earthquake.usgs.gov/fdsnws/event/1/query"

params = {
    "format": "csv",
    "starttime": "1950-01-01",
    "endtime": today,
    "latitude": latitude,
    "longitude": longitude,
    "maxradiuskm": 150,
}

response = requests.get(url, params=params)
response.raise_for_status()

df = pd.read_csv(StringIO(response.text))

df.isna().sum()

def get_month_name(month_number):
    number = int(month_number - 1)
    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    actual_name = month_names[number]
    return actual_name

df['year'] = df['time'].str.split('-').str[0].astype(int)
df['month'] = df['time'].str.split('-').str[1].astype(int)
for index, row in df.iterrows():
    df.loc[index, 'month'] = get_month_name(row['month'])
df['day'] = df['time'].str.split('-').str[2].str.slice(0,2)

clean_df = df[['year', 'month', 'day', 'latitude', 'longitude', 'mag']].copy()
clean_df = clean_df[clean_df['mag'] > 0]

mag_list = sorted(clean_df['mag'])
ricter_scale_top = 9.9
itensify_factor = 30

mag_weights = {}
for i, n in enumerate(mag_list):
  weight = (n/(ricter_scale_top))*itensify_factor
  mag_weights[n] = weight
max_mag = max(mag_weights)
mag_weights = {n: n / max_mag for n in mag_list}

clean_df['weight'] = clean_df['mag'].map(mag_weights)
grouped = clean_df.groupby('year')
hm_data = [group[['latitude', 'longitude', 'weight']].values.tolist()
           for _, group in grouped]

#years
time_index = list(grouped.groups.keys())

m = folium.Map(
    max_bounds=True,
    location=[49.24,-123.11],
    width=1250, height=1200,
    zoom_start=9,
    zoom_control=False,
    )

hm = folium.plugins.HeatMapWithTime(hm_data, index=time_index, auto_play=True, max_opacity=1.9)
hm.add_to(m)
folium.TileLayer('OpenStreetMap').add_to(m)
folium.TileLayer('Cartodb Positron').add_to(m)
folium.TileLayer('OPNVKarte').add_to(m)
folium.TileLayer('CyclOSM').add_to(m)
folium.LayerControl().add_to(m)
folium.plugins.ScrollZoomToggler().add_to(m)

m

plt.figure(figsize=(14, 7))
sns.set_theme(style="whitegrid")

sns.lineplot(
    data=clean_df.sort_values('year'),
    x='year',
    y='mag',
    palette="crest",
    color='royalblue',
    linewidth=2
)

plt.title(
    'Historical Patterns of Earthquake Magnitude',
    fontsize=18,
    fontweight='bold',
    pad=20
    )
plt.xlabel('Year', fontsize=14, labelpad=15)
plt.ylabel('Magnitude', fontsize=14,labelpad=15)
plt.xticks(rotation=45, ha='right')
plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.6)

plt.tight_layout()
plt.show()

earthquakes_per_year = clean_df['year'].value_counts().sort_index()

plt.figure(figsize=(18, 6))
sns.set_theme(style="whitegrid")

sns.barplot(
    x=earthquakes_per_year.index,
    y=earthquakes_per_year.values,
    palette="crest"
)


for i, val in enumerate(earthquakes_per_year.values):
    plt.text(i, val + 0.5, f"{val}", ha='center', va='bottom', fontsize=9)

plt.title(
    "Annual Frequency of Earthquakes",
    fontsize=18,
    fontweight="bold",
    pad=20
    )
plt.xlabel("Year", fontsize=14, labelpad=15)
plt.ylabel("Number of Earthquakes", fontsize=14, labelpad=15)

plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()